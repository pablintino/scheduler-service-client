image: docker:19.03.12
# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
stages:
  - build
  - release

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

.mvn_build_and_it_tests:
  services:
    - name: postgres:13.4
    - name: rabbitmq:3.9.5
    - name: registry.pablintino.com/pablintino-arq/scheduler-service:latest
      alias: scheduler-service
  variables:
    FF_NETWORK_PER_BUILD: 1
    SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/it-database"
    SPRING_DATASOURCE_USERNAME: postgres
    SPRING_DATASOURCE_PASSWORD: changeme
    SPRING_RABBITMQ_HOST: rabbitmq
    SPRING_RABBITMQ_PORT: 5672
    COM_PABLINTINO_SCHEDULER_CLIENT_RABBIT_URI: amqp://guest:guest@rabbitmq:5672
    COM_PABLINTINO_SCHEDULER_CLIENT_URL: http://scheduler-service:8080
    POSTGRES_DB: "it-database"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "changeme"

maven-verify:
  image: maven:3.8.2-jdk-11
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS verify -s ci_settings.xml'
  except:
    - master

maven-verify-it:
  image: maven:3.8.2-jdk-11
  extends: .mvn_build_and_it_tests
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS verify -s ci_settings.xml -P ci-it-test'
  only:
    - master
    - tags

release:
  image: maven:3.8.2-jdk-11
  stage: release
  only:
    - master
  when: manual
  before_script:
    - 'mkdir -p ~/.ssh/'
    - 'echo -n "$DEPLOY_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa'
    - 'chmod 700 ~/.ssh'
    - 'chmod 600 ~/.ssh/id_rsa'
    - 'cp $KNOWN_HOSTS ~/.ssh/known_hosts'
    - 'apt-get update && apt-get install -y git'
    - 'git config --global user.email "noreply@your.gitlab.host"'
    - 'git config --global user.name "GitLab CI"'
    - 'git checkout -B "$CI_COMMIT_REF_NAME"'
  script:
    - if [ ! -f ci_settings.xml ];
      then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
      fi
    - 'mvn release:prepare release:perform -s ci_settings.xml'